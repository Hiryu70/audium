// <auto-generated />
using System;
using Audium.Persistance;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace Audium.Persistance.Migrations
{
    [DbContext(typeof(AudiumDbContext))]
    [Migration("20240225182313_InitialMigration")]
    partial class InitialMigration
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.16")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.HasSequence("TrackSequence");

            modelBuilder.Entity("Audium.Domain.Artist", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<string>("ArtistName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Artists");
                });

            modelBuilder.Entity("Audium.Domain.Track", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasDefaultValueSql("nextval('\"TrackSequence\"')");

                    NpgsqlPropertyBuilderExtensions.UseSequence(b.Property<long>("Id"));

                    b.Property<long>("ArtistId")
                        .HasColumnType("bigint");

                    b.Property<string>("ExternalSourceUrl")
                        .HasColumnType("text");

                    b.Property<string>("StorageFileName")
                        .HasColumnType("text");

                    b.Property<string>("TrackName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("ArtistId");

                    b.ToTable("Tracks");

                    b.UseTpcMappingStrategy();
                });

            modelBuilder.Entity("Audium.Domain.TrackForDate", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<DateOnly>("ForDate")
                        .HasColumnType("date");

                    b.Property<long>("TrackId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("TrackId");

                    b.ToTable("TrackForDate");
                });

            modelBuilder.Entity("Audium.Domain.UserGuess", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<int>("AttemptsCount")
                        .HasColumnType("integer");

                    b.Property<string>("Cookie")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateOnly>("GuessDate")
                        .HasColumnType("date");

                    b.Property<DateTime>("GuessEnd")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("GuessStart")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("IsCorrect")
                        .HasColumnType("boolean");

                    b.Property<long>("TrackId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("TrackId");

                    b.ToTable("UsersGuess");
                });

            modelBuilder.Entity("Audium.Domain.Track", b =>
                {
                    b.HasOne("Audium.Domain.Artist", "Artist")
                        .WithMany("Tracks")
                        .HasForeignKey("ArtistId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Artist");
                });

            modelBuilder.Entity("Audium.Domain.TrackForDate", b =>
                {
                    b.HasOne("Audium.Domain.Track", "Track")
                        .WithMany("TrackForDates")
                        .HasForeignKey("TrackId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Track");
                });

            modelBuilder.Entity("Audium.Domain.UserGuess", b =>
                {
                    b.HasOne("Audium.Domain.Track", "Track")
                        .WithMany()
                        .HasForeignKey("TrackId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Track");
                });

            modelBuilder.Entity("Audium.Domain.Artist", b =>
                {
                    b.Navigation("Tracks");
                });

            modelBuilder.Entity("Audium.Domain.Track", b =>
                {
                    b.Navigation("TrackForDates");
                });
#pragma warning restore 612, 618
        }
    }
}
